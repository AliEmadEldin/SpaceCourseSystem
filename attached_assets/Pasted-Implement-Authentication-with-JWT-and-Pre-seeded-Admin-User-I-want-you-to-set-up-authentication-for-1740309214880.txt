Implement Authentication with JWT and Pre-seeded Admin User
"I want you to set up authentication for the SpaceCourse backend in spacecourse/backend. Install dependencies by running npm install jsonwebtoken bcryptjs dotenv in spacecourse/backend. Create a file spacecourse/backend/routes/auth.js for authentication routes. In auth.js, write this code:

javascript
Wrap
Copy
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const pool = require('../db');
require('dotenv').config();
const router = express.Router();

// Seed Admin user on startup
async function seedAdminUser() {
  const adminEmail = 'admin@spacecourse.com';
  const adminPassword = 'SpaceAdmin123';
  const adminRole = 'admin';
  try {
    const checkUser = await pool.query('SELECT * FROM users WHERE email = $1', [adminEmail]);
    if (checkUser.rows.length === 0) {
      const hashedPassword = await bcrypt.hash(adminPassword, 10);
      await pool.query('INSERT INTO users (email, password, role) VALUES ($1, $2, $3)', [adminEmail, hashedPassword, adminRole]);
      console.log('Admin user created: admin@spacecourse.com / SpaceAdmin123');
    } else {
      console.log('Admin user already exists');
    }
  } catch (err) {
    console.error('Error seeding admin:', err);
  }
}

seedAdminUser();

// Register route
router.post('/register', async (req, res) => {
  const { email, password, role } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const result = await pool.query(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      [email, hashedPassword, role || 'student']
    );
    const token = jwt.sign({ id: result.rows[0].id, role }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: 'Registration failed: ' + err.message });
  }
});

// Login route
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    const user = result.rows[0];
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }
    const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ error: 'Login failed: ' + err.message });
  }
});

module.exports = router;
Update spacecourse/backend/server.js to include this route by adding:

javascript
Wrap
Copy
const express = require('express');
const authRoutes = require('./routes/auth');
const app = express();
app.use(express.json());
app.use('/api/auth', authRoutes);
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
Add JWT_SECRET=your-secret-key-here to spacecourse/backend/.env. Ensure the server connects to the PostgreSQL database via db.js. Start the server with node server.js and verify the Admin user is seeded by checking the console output."